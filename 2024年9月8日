2024年9月8日
ES:
	question list:
		为什么es可以支持同个索引中的多个字段检索？
		es的前缀树+position dictionary的检索方式和mysql的文本检索方式有什么不同？
		直播大屏 es存几百亿数据，上t的数据量，那es的集群组成是什么样的，用什么分词器，刷盘时间是多少？

		ES是基于倒排索引，那根据某些字段排序是如何实现的？其中数字排序和范围筛选如何实现？
	tip list:
		深度分页问题
		全文检索原理
			前缀树+

	priority list:
		ES问题排查和定位



MySQL:
	既然mysql是先写内存再同步bin log，而redis也是进行内存操作再持久化，为什么redis就是比mysql快呢？

	priority list:
		不同语句加锁情况
		组合索引案例
		慢查询问题定位和优化案例
		索引失效的情况

	


HBase：
	存储格式和MySQL有什么区别？为什么能用于大数据存储？


	Hbase的rowKey为什么设计成 余数:主播id 的格式？
		1.余数是为了Hbase的数据能够均匀分布在不同region上，不会造成数据倾斜
		2.数据都是以主播为维度，Hbase支持前缀匹配，该格式的rowKey便于scan操作


Kafka:
	question list：
		商品数据的kafka的broker以及parttion是如何分布的，线程池如何设计？
		kafka的消费者数量跟线程数有关还是只跟容器数有关？


Java:

	question list:
		多线程
			创建线程的方式（代码）
				new Thread
				new Thread(Runnable)
				new Thread(new FutureTask(Callable))
			阻塞队列的定义以及不同种类队列的适用范围
				array 有界；积压可控
				link 无界；不了解消息长度
				synchronous 低延迟；无积压

			线程池的参数设置规则；在业务场景中如何设置
				cpu coret: core + 1 maxt: core + 1
				io coret: core * 2 maxt: coret * 2 ~ 4 
			synchronized时，线程是如何阻塞，又是如何被唤醒的
				这都是JVM管理的

			volatile的有序性是如何实现的
				通过读写屏障实现的
			semaphore应用场景

		JVM
			JMM
				公共内存
					堆
						运行时常量池：静态变量
						字符串常量池
					方法区/元空间
						类定义
				私有内存
					虚拟机栈
					本地方法栈
					程序计数器
			垃圾回收器种类
				serial
				parallel
				CMS
					回收流程
					为什么处理不了浮动垃圾？
				G1
					特点
						分区
						停顿可预测
					参数设置
					回收流程
					缺陷
						主要的STW为复制-转移过程中，时间与对象的大小和复杂程度成正比，极端情况可能造成若干秒的STW
						其中转移过程不能并发根本原因为无法对对象准确寻址
				ZGC
					特点
						读屏障：对对象进行操作时，会更新对象的新地址，确保始终访问的都是新地址
						着色指针：通过地址记录对象的存活信息，无需寻址查看对象头
					参数设置
						con_gc_threads
						par_gc_threads	

			垃圾回收算法
				复制
				标记清除/整理
				分代
					分代大小比例
					分配担保
			类加载机制
				类加载器
					bootstrap
					ext
					app
					user define
				双亲委派


项目经历 2h
	直播大屏
		es/kv和db的数据一致性如何保证
		不同数据源对应的业务场景，为何这么选型
			session item分钟级数据 ES 需要商品名称模糊检索 需要按滑动窗口存储分钟级数据，而es能够支持筛选数组中的元素，类型为nested
		不同数据源的数据量
		线上问题
		优化迭代



分布式 2h


Redis 3h
	线程模型
		单线程
		io多路复用
			大量并发请求时如何高效处理请求？
				epoll和select的对比
		epoll
	分布式
		主从
			备份方式
				rdb
				aof
			效率对比以及redis的内存大小设置？
				对主线程影响 rdb < aof
				文件体积 rdb < aof
				可靠性 rdb < aof
				设置为最大内存的1/2，极端情况内存所有数据都被更改时，子进程用于rdb备份的内存数据和父进程被更改的数据各占一半

		集群
			一致性哈希

			故障转移

			哨兵
				所以总结来说cluster是通过多个节点相互通信确认节点健康状态，而sentinel是通过选举sentinel领头节点去负责已知的主节点故障转移
		应用场景
			问题
				缓存击穿 热点key过期
				缓存雪崩 大量key过期
				缓存穿透 非法的数据请求
					布隆过滤器
			db缓存策略
				先db 后缓存



设计模式 2h


中间件版本、配置、架构、数据量、性能、可用性 1h







踩坑记录：
	https://docs.google.com/document/d/1OPU85uOrNKOGEb7Y4Q05h4hVkyHW7qLBIsFpWcBZNT0/edit#heading=h.9gp5ayiy89h

