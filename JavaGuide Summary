JavaGuide Summary

Java
	基础
		概念
			JDK/JRE
				开发工具
				运行环境
			编译/解释
				编译成机器码直接运行
				解释成机器码，一边解释一边运行
			字节码
				由java解释器解释运行
			JIT
				运行时编译，将之前热点代码字节码对应的机器码保存下来
			AOT
				直接将字节码编译成机器码，为了支持ASM字节码框架的动态代理等特性，不能全用AOT提前编译

		基本数据类型
			包装类型缓存机制
				Byte Integer Long Short -128 - 127
				Character 0 - 127
			自动装箱拆箱	
				自动调用了类似Integer.valueOf(int i)或者是.intValue()方法
			精度丢失
				二进制小数无法完全还原十进制的精度，可以用科学计数法，x10即可
			bigdecimal

		面向对象
			浅拷贝/深拷贝
				前者只会复制外层对象引用，后者内部包含的对象也复制
			==/equals()
				地址/内容
			hashcode()
				保证对象地址唯一性
			String/StringBuffer/StringBuilder
				
				线程安全
				线程不安全
			String不可变
				final修饰+private
			String +/常量折叠
				每次+String会生成新对象，但是由于常量折叠，所以"a" + "b"并不会调用拼接方法，在编译期就能得出值
				javac编译器会把编译期间可以确定的常量自动求值后放在字符串常量池中
		异常
			error
				不受控制
			checked exception
				runtime
				IO
			unchecked exception
				NPE
				Illegal
				ArrayOutOfBound
			Throwable常用方法
				getMessage 简要信息 永远别用
				toString 详细信息

			try with resources
				把try中的资源释放(类似python中的with open)

		泛型
			泛型应用 
				指定参数类型范围
				自定义接口/集合类
		注解
			注解解析方式
				编译期直接扫描
				运行时通过反射处理
		SPI
			SPI/API
				
		序列化
			定义 把对象转化为网络中能够传输的字节流（个人理解就是编码）
			序列化协议
		IO
			BIO/AIO/NIO
		*汇总*
			值传递 
				java中基本类型是值的复制，引用类型是地址的复制（复制不是同一份）
				https://www.zhihu.com/question/31203609/answer/576030121

			序列化协议
				主要作用就是将结构和对象转换为便于传输体积更小的二进制流
				序列化存在于表示层
				java自带序列化效率低、安全性差、不支持跨语言
				kryo、protobuf
			代理模式
				静态代理
				动态代理
					cglib
						AMS运行时动态生成字节码
						不需要实现接口
					JDK
						必须要接口
						效率较高
			BigDecimal原理
				按十进制还原为整数，并记录精度（* 10 或者 * 1000）
			Unsafe类
				作用
					内存屏障
					CAS
					...
			SPI
				由服务调用者给服务提供者定义的接口
				java中的SPI是通过反射的方式判断实现类是否实现了规定接口
			语法糖的坑（泛型也算语法糖）
				编译时泛型擦除
				运行时无法判断泛型类型（通过反射获取的类型进行判断可能会有问题）
				类泛型擦除后静态变量会关联到同一个地方 Fan<T>不同类的静态变量是一样的
				增强for的concurrentModificationException

	集合
		list
			ArrayList/Vector
				初始化 默认空数组 +1 = 10
				扩容
					1.5倍
					Integer.MAX_VALUE限制
					ensureCapicity
			LinkedList
				remove效率不如ArrayList https://www.cnblogs.com/NickyYe/p/4461454.html
			randomAccess
		Set
			HashSet/LinkedHashSet/TreeSet
		Queue
			Queue/Deque
			ArrayDeque/LinkedList
				垃圾LinkedList
			PriorityQueue
				二叉堆
		Map
			HashMap/HashTable
				长度/线程安全/底层实现/效率/null
			HashMap/TreeMap
			HashSet
			HashMap底层实现/长度2^n/遍历方式/死锁/线程安全
				hash扰动
					上16位 + 下16位，1.7是扰动四次
				长度2^n 与运算等效于取余
				多线程问题
					同时put，数据丢失
					同事put get 脏读旧数据
					同时put发生rehash 头插迁移导致循环链表
				遍历方式 https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw 尽量用entrySet迭代
				负载因子
					0.75 泊松分布
				put流程
					判断table是否为空，初始化table
					计算key hash
					遍历链表，判断key相等，相等更新，遍历完不相等，插入一个entry
				get流程
				resize *2 element重新分配
			HashTable/ConcrruentHashMap
				1.7/1.8
					结构
						segment
						数组+链表/红黑树
					并发数量
						默认16segment
						node节点数量
					并发实现
						cas + 自旋 + synchronized
				结构
				锁粒度
		注意事项
			判空
			转map
				value不为null
			遍历
				iterator删除
			fail fast
				遍历集合时不能修改集合
			集合转数组
				toArray(new T[0])
			数组转集合
				Arrays.asList()返回的ArrayList其实是Arrays里的一个内部类
				必须是对象数组
				不能修改转化后的集合
				用new ArrayList<>(Arrays.asList(Object[] {}))
	源码
		IO
			IO分类
				字节/字符流
					字节流长度固定，字符流根据编码长度不固定？√
				缓冲字节/字符流
				RandomAccessFile
					标识该流是否可以随机读？×，实际该类就能支持随机读，不是抽象接口
			设计模式
				装饰器
					一个对象外边包一层
				适配器
					同时实现两个不相干接口，用改类做交互
				工厂
					具体工厂
						需要改代码，耦合度较高
					抽象工厂
						不需要改代码，直接继承抽象工厂覆写生产方法即可
				观察者
					给某个事件添加观察者后，触发某些事件后通过回调方法通知观察者
			IO模型
				BIO
					read之后阻塞，等待内核调用读操作，从磁盘中读取数据后返回，整个流程当前线程阻塞
				NIO
					read之后不断轮询，用cpu忙等换阻塞成本？那不是还不如阻塞？但是如果是调用read之后直接返回，然后再处理其他事情的话，可以设置1min轮询一次即可，效率就能变高了
					多路复用为epoll之后等待回调通知
				AIO
					第二阶段数据拷贝由内核操作，并不影响进程，通过回调通知进程
		并发
			进程/线程/协程
				cpu执行时间
				上下文切换成本粒度
				共享的资源
					堆
				线程独占的资源
					本地方法栈
					虚拟机栈
					程序计数器
			多线程
			线程生命周期
				就绪 start
				阻塞 synchronized
				有限等待 sleep
				无限等待 wait
				死亡 system.exit()
			死锁
				互斥 一个资源只有一个线程占用
				请求和保持 线程没抢到锁之前不会释放当前锁
				不可剥夺 线程不能从别的线程那抢锁
				循环 形成闭环
			sleep/wait/join/yield
				sleep用于thread，当前线程不让出其占用的所有锁 让出cpu
				wait用户对象，当前线程让出改对象锁 让出cpu，下一次不会被唤醒 因为要释放对象锁，所以才是通过对象调用
				被调用的join线程优先执行，之后调用线程再执行
				yield暂停当前线程(调用方法的线程，不是方法里的线程)
			锁
				乐观锁/悲观锁
				CAS
			JMM
				CPU高速缓存
				-> 多核CPU中内存不一致
				-> MESI协议 解决了多核CPU中数据一致性的问题
				指令重排序 cpu层面，为了充分利用多核性能?->减少了MESI协议中CPU内核状态置换造成了空闲时间
					通过类似于缓存的方式异步通知，类似于分布式系统中保障最终一致性
					但是这种方式会导致数据不可见，c1核中的数据和c2核中的数据都被修改了，这个时候就要告诉cpu什么时候不能重排保证数据对多核都可见（如下）
				内存屏障 属于MESI协议？不属于，程序员需要用内存屏障告诉CPU什么时候该排什么时候不该排
				JMM定义
					Java为跨平台中解决多线程指令重排问题定制的一组规范
					本地内存/主内存
						为了提高效率？每次读主存确实感觉效率低
				happens-before
					JMM根据happens-before原则去禁止某种类型的指令重排序 比如：赋值必须在取值之前？单线程中前继操作必须在后继操作之前
			volatile
				可见性
					从主存中读取
				禁止指令重排
					内存屏障
				无原子性
					不能保证多线程读取的先后顺序
			synchronized
				原理
					修饰方法 方法前ACC标识
						修饰静态方法 给class对象上锁 反映到最后都是对象头上的标识位
						修饰实例方法 给实例对象上锁
					修饰代码块 对象头的monitor_enter monitor_exit
				优化
					偏向锁 线程占用锁之后，不会马上释放，除非有其他线程竞争
					轻量级锁 其他线程竞争锁时，通过轮询判断锁是否释放，cpu忙等换线程挂起导致内核态切换成本
					重量级锁 轮询10次以上无果，挂起线程，等待锁释放再唤醒
					锁膨胀 循环内加锁jvm会自动将锁扩张到循环外
				synchronized/volatile
					都是线程同步的方式
					一个能保证线程安全一个不能
				synchronized/reentrantLock
					都是可重入 同一个线程再次获取锁不会被阻塞，sync通过对象头的state+1标识重入，lock通过aqs中的state+1表示重入
					公平/非公平 sync是非公平锁，aqs设置为unfair的时候，新加入的线程和队列头部的线程共同竞争锁，有可能导致饥饿
					可中断/可通知 sync不能中断，lock可以unlock释放锁？通过interrupt释放
				ReentrantReadWriteLock
					一把读锁一把写锁
					共享锁/独占锁 共享锁可以允许n个线程同时进入临界区，有队列？通过>1的state实现多线程共享
				StampedLock 干啥的？
					不可重入
					不支持condition通知
			ThreadLocal
				原理
					ThreadLocalMap
						存在Thread中 key为ThreadLocal引用 value为ThreadLocal存放的值
				风险
					内存泄漏 Thread->ThreaLocalMap->Entry->Value的强引用链不会被回收
						手动调用remove才会清理key为null的entry
				set
					线性探测法实现的hash表 why?比较简单吧，可莉不知道哦
				扩容
				清理
					探测式清理 每隔一段时间后清理
					启发式清理 set的时候进行清理
			Atomic
				CAS + volatile支持并发度较小的情况，并发度一大，CAS会非常占用CPU资源，每次判断都是无效判断，判断了1000次才成功还不如直接挂起
			线程池
				参数
					重要
						corePoolSize
						maxPoolSize
						阻塞队列
							ArrayBlockingQueue
							LinkedBlockingQueue
							SynchronousQueue
					不重要
						饱和策略
						时间单位
						keepAliveTime
						线程工厂
				Executors
					不建议使用因为各种OOM
				饱和策略
					丢弃
					新开线程处理
					异常
				原理
					先满足核心线程数
					再放入阻塞队列
					再填充最大线程数
					再执行拒绝策略
				大小设置
					CPU密集型 排序计算 n + 1 其中1为了防止缺页中断
					IO密集型 文件数据读写 2n
				注意事项
					命名
					加监控
			AQS
				原理
					CLH队列+state计数器
				Semaphore
					线程共享信号量，限定一次n个线程同时执行
				CountDownLatch
					单次计数器，当n个线程执行完后执行await线程
				CyclicBarrier
					可重复计数器，当n个线程执行完调用await之后执行action动作
		*重要*
			乐观锁/悲观锁
				实现/版本号/CAS
				存在问题/ABA
					ABA危害 https://www.cnblogs.com/yingying7/p/12573240.html
			Atomic
				原理
				应用场景？
			ThreadLocal
				数据结构
				内存泄漏
				hash
				set/get
				过期key
				扩容
				InheritableThreadLocal
				实践
			CompletableFuture
	JVM
		内存区域
			运行时数据区
				程序计数器
				Java虚拟机栈
					存放方法调用的局部变量、动态链接、方法返回地址
				本地方法栈
					nvtive方法调用的栈
				堆
					新生代
					老年代
					方法区/永久代/元空间
				方法区
					1.8之后合并到元空间，减少OOM
				运行时常量池 也在方法区中吗？对，也在方法区里
					存一些整数、浮点数和符号引用，1.8之后跟着方法区合到元空间了
				字符串常量池
					专门存字符串，1.7之后位于堆中
				直接内存
			HotSpot对象
				创建
					类型检查 看对象的类是否被加载过，没有的话则进行类的加载
					分配内存
						TLAB + CAS 原理？ CAS应该就是比较内存地址的内容是否为空，为空则进行内存分配，不为空就过一段时间再比或者换一块空间吧，TLAB就是给每个线程提前安排好一块空间，在安排好的空间里进行内存分配
					初始化零值 基本类型赋0值
					设置对象头 设置对象头中的元数据信息
					init 调用对象的构造方法？不是，是将对象中的属性进行实际赋值

				内存布局
					对象头 分代信息、占用对象的线程id、hash值==
					数据
					对齐填充 让对象的空间为8字节的整数倍
				访问定位
					句柄
						指针的指针
					指针
						指向对象
		垃圾回收
			堆空间
				新生代
					Eden S0 S1
					比例 8:1:1
					存活时间 1 << 4 - 1 = 15 也可能不是15

				老年代
					新生代对象超过生命周期之后放入老年代
				永久代
					大对象大数组之类直接扔永久代 现在new一个超大对象是放在元空间吗？
			内存分配回收

			死亡对象判断
				可达性分析 由root对象向下进行dfs，判断对象是否可达
					gcroot包括当前存活的对象，以及可能伴随整个生命周期的对象，比如静态变量
				引用计数法 对象被引用就+1，可能存在循环引用的问题，两个对象相互引用对方，导致这两个对象需要被淘汰时，依然存在引用数，无法被淘汰
				引用
					强引用 普通的对象的引用
					软引用 GC扫描时只有内存不足时就会被回收？那和普通引用不是一样吗？ 用作内存敏感的缓存
					弱引用 一旦被GC扫描时发现就会被回收
					虚引用 等于没引用？ 搭配引用队列使用，用于对象回收后的通知或者处理，比如给一个对象添加虚引用，就可以在对象回收后从引用队列中找到该虚引用，从而知道该对象被回收了
			垃圾收集算法
				标记清除 一片空间，清除标记之后的垃圾
				复制 应该叫标记-复制-清除 两片空间，标记之后复制剩下的到另一片空间，清除剩下的
				标记整理 一片空间，清除标记之后的垃圾，在把垃圾整理归类
				分代 与以上概念不冲突，分成多级，根据存活时间逐级晋升
			垃圾收集器
				serial STW，然后进行垃圾回收，单线程
				parNew STW，然后进行垃圾回收，多线程
				CMS
					流程
						初始标记 短暂STW，然后给gcroot打标
						并发标记 不暂停，然后在程序运行时给相关引用对象打标
						最终标记 STW，将并发标记时的错标、漏标对象纠正？会纠正并发标记的时候错标漏标的对象
						标记清除 将未被标记的对象清除 在这期间产生的垃圾称为浮动垃圾
					问题
						无法处理浮动垃圾？见上
						内存碎片多 因为基于标记清除法
					三色标记法
						过程
							gcroot标黑
							相关标灰
							不相关标白
							清除白色
						错误
							漏标 标记时引用断开了，导致少回收了对象
							错标 白色对象被引用了，不该回收的对象会被回收
						解决
							类似AOP写屏障？ 对象引用变更的时候记录下操作，下次扫描的时候根据记录的数据纠正
				G1
					特点
						暂停时间短 50ms
						时间可预测
						并发GC 和CMS一样？对的呢
						筛选回收 根据优先级进行回收
						适合内存较大、浮动垃圾多情况 基于复制？no，基于标记整理（需要进行数据在不同s，e区内的迁移，也算是有复制的流程）
					结构
						S E O H survive eden ？old huge 专门存大对象，防止大对象长时间放在老年代导致频繁full gc
						记忆集 key为region，value为卡表索引集合（第n个region的第n页）
						卡表 相当于region的页表
					设置
						预期暂停时间
						避免手动设置比例

				ZGC
					特点
						通过着色指针和读屏障减少了对象复制过程中的寻址消耗，使得能够马上准确定位
						适合低延时要求的场景，但是不适合极低延时（瓶颈在其他地方）
					着色指针
						64位地址中存储了其他的额外信息，让垃圾回收器准确知道对象位置
					读屏障
						从堆中读取引用的时候回更新指针，
		类文件结构
			class结构
		类加载过程
			类生命周期
				
			加载流程
				加载 获取二进制流在内存中生成对象
				验证 文件格式元数据字节码验证
				准备 给static变量分配内存设置初始值
				解析 符号引用替换为直接引用
				初始化 执行初始化方法
			卸载
				没有引用的自定义类加载器加载的类
		类加载器
			双亲委派
				自底向上检查类加载器，自顶向下尝试加载
				作用
					保护原生类，避免重复加载
				打破
					重写loadClass方法
					场景
						tomcat不同版本应用 不用应用的jdk版本不同，tomcat打破双亲委派可以让每个web容器自己加载自己的类
			自定义类加载器
				场景
					加载加密后的java class 重写findClass方法
			自定义object类
		JVM参数
			堆内存相关
				最大最小堆 xms xmx
			垃圾收集相关
				-XX: +UseG1GC
			OOM
				-XX:+HeapDumpOnOutOfMemoryError 将OOM错误转储到物理文件中
		JVM调优
			Xmx Xms设置为相同避免扩容
			xmn设置为堆大小的3/8

		JDK工具
			命令行工具
				jps 查看jvm相关进程
				jstat -gc 查看gc信息
				jmap 查看jvm中class和对象内存使用情况
				jstack 查看虚拟机快照
	Java新特性
		8
			匿名函数
			stream
			optional
			date time		

计算机基础
	网络
		常见面试题
			TCP/UDP
				区别
					可靠性 tcp需要保证消息的可靠性，udp发了就发了
					建立连接 tcp是面向连接的全双工通信，有建立连接的步骤，udp直接发就行
					面向流和报文 udp是有报文的，tcp是面向流的？流为什么有序号，有序号和面向流（接收端不能确定边界）不冲突
					一对一和n对n tcp是端到端 ip1 port1 ip2 port3 socket唯一确定连接 udp不是吗？udp支持单播、多播、广播
				适用场景
					tcp 请求
					udp 视频 会话 聊天
			HTTP
				一次请求过程
					dns解析ip 域名->ip
					tcp建立连接 确定两端能够进行数据传输
					http请求逐层包装 http + tcp + ip + mac + ...
					arp解析局域网寻址 mac1 -> mac2 -> macn 路由mac
					ip解析路由转发 根据ip在广域网以及子网中传输
					逐次拆包获得响应报文 client收到消息之后逐层解析
					解析后页面加载渲染
				HTTP保存用户状态
					无状态协议
					cookie
						客户端保存的信息 一堆客户端的状态信息存在一个文件
					session
						服务端保存的数据 
					token
						认证令牌用于核对请求是否合法
				URI/URL
					URI > URL

			ARP
				MAC
				工作原理
					解析MAC，转发之后替换成自己的MAC? yeah
		重要
			OSI
				7层协议
			TCP/IP
				5层
					应用层
						表示
						会话层
					传输层 tcp
					网络层 ip
					数据链路层 mac
					物理层
			应用层协议
				HTTP 
				Telnet 不安全会话
				POP3 邮件 
				SMTP 邮件
				FTP 传文件
				SSH 会话
			HTTP
			HTTPS
				加密流程
					对称加密内容
					非对称加密对称加密秘钥
					浏览器内置公钥对证书解密获得非对称加密公钥
				TLS
				SSL
			HTTP版本
				1.0
				1.1
					缓存
					keep-alive tcp链接不断开
					加了错误码
				2.0
					多路复用tcp连接
					二进制解析
					header压缩
				3.0
					QUIC
						没有握手
						0RTT能建立连接
			HTTP状态码
				2xx
					200 成功
					201 成功修改
				3xx
					301 永久转移
					302 临时转移
				4xx
					401 没权限
					403 forbidden
					404 not found
					405 方法不对
					409 版本不对
				5xx
					500 服务器错误
					502 服务没起来
					503 服务器过载维护
					504 请求超时 nginx配错了
			TCP建立连接
				三次握手
					A请求B ACK seq = n
					B同意A+请求A SYN + ACK seq = n + 1
						半连接 没有完成三次握手也可发数据
						sync攻击 大量sync使得服务端重复发送syn + ack
							ip限制
							频率限制
							减少重试
							减少释放连接时间
					A同意B SYN seq = n + 2
				四次挥手
					A请求B断开 FIN A fin_wait_1 
					B同意A断开 ACK B close_wait A fin_wait_2
					B请求A断开 FIN B last_ack 
					A同意B断开 ACk A time_wait
						2MSL
							保证收到ACk，收不到key重发ACK请求
							让该链接所有报文消失，防止下次出现
						大量time_wait
							短效连接
								解决：减少等待时间、允许time_wait建立新链接
				粘包
					设计划分tcp报文的方法
						chunked
						content-length
				tfo
					首次建立连接时服务端回传了syn cookie
					第二次客户端直接发送syn + cookie + http请求后，客户端就能返回http response
			TCP可靠性
				连接管理
				流控：针对端到端
					滑动窗口
						ARQ协议
							停等
							连续ARQ
				拥塞控制：针对网络
					慢开始 1 -> 每次翻倍
					拥塞控制 n +1 +1
					快重传 3次收到报文1的ack，重传报文2
					快恢复 慢开始门限减半，窗口==慢开始门限
			ARP协议
				地址解析
			同源策略
				浏览器跨域名资源不能访问
				解决跨域
					iframe
					cookie在二三级域名之间能访问
					CROS带上header解决
	操作系统
		常见面试题
			基础
				操作系统定义
				系统调用
					用户态/内核态
						低权限，普通用户进程所处的状态
						高权限，可以访问几乎所有资源
					设备管理
					文件管理
					进程控制
					进程通信
						管道 父进程fork出子进程，在内核区开辟内存，父进程留写端，子进程留读端，实现数据流写入
							命名管道
							匿名管道 |
						共享内存 多个进程将虚拟内存映射到同一块物理内存
						socket
						消息队列
						信号 kill -9
						信号量 类似java的semaphore，允许多线程/进程同时访问临界资源



					内存管理
						分类
							同等块式
							同等页式 < 块式
							代码分段式
							段页式
						虚拟内存
							每个进程有自己独立的逻辑内存空间，防止对内核以及相互之间发生干扰
			进程/线程/协程
				都是CPU执行一段时间的描述，区别在于时间的长短、占用的资源开销
				多线程 线程之间会相互影响，但是上下文切换成本小，适用于CPU频繁切换计算密集场景
				多进程 进程之间影响小，适用于分布式主机之间通信
				协程 用户态的微线程，有自己的寄存器和栈

		Linux
			文件系统
				inode：记录文件元信息
			基本命令
				find 查找文件内容
				lsof 查看打开文件
				ps 查找进程
				top 查看当前所有进程
				netstat 查看网络端口
			环境变量
				用户环境变量 ~/.*
				系统环境变量 /etc/*
	数据结构
		数组/链表/栈/队列
			应用场景
		堆
			定义
			存储
			操作
			排序
		树
			分类
			存储
		红黑树
		布隆过滤器
			redis中布隆过滤器

数据库
	基础知识
		drop/delete/truncate
		数据库结构设计流程
	NoSQL
		SQL/noSQL
		优势
		类型
	字符集
		常见字符集
			ASCII 
			unicode/UTF-8
			GB2312
		MySQL字符集
	MySQL常见面试题
		基础架构
			连接器：建立连接，用户登录
			检查器：语法检查
			优化器：执行索引优化
			执行器：实际执行
			插件式存储引擎：存储数据、提供api
		存储引擎
			InnoDB对比MyISAM
				外键支持
				支持事务
				锁级别细化
				资源消耗大
				索引主键为聚簇索引，非主键为辅助索引
		索引
			功能分类
				index
				unique
				primary
				fulltext：原理为倒排
			结构
				B+树
					聚集索引：叶子存数据
					非聚集索引：叶子存主键id
				hash：memoery引擎使用
			其他
				覆盖索引
				联合索引
			索引优化
				最左前缀匹配
					最左侧索引应当业务使用率高、区分度高、分布稀疏
					左侧索引范围查询会导致后续索引失效

			优化

		查询缓存
			条件
				SQL一致、表结构一致、字符集一致、大小写不敏感
			提高命中率
				固化SQL
				加内存
				表加分区，让数据固化

		日志
			bin log：用于主从同步（有bin log cache类似缓存）
				statement：记录单次修改的DML
				row：详细行记录，可以反应函数和存储过程，采用了gtid之后，一般用row模式
				mixed：没有不一致的可能就用statement，有就用row
				gtid：全局事务唯一id，在主从切换时可以通过自动匹配gtid而省去binlog中断点
			redo log：用顺序写代替随机写作为缓存，写满之后批量写磁盘，用于宕机恢复（有redo log buffer作为缓存）
				两阶段提交：为保证数据正确性，需要redo log和bin log中数据一致
					事务记录到redo log，状态为prepare
					事务记录到binlog
					redo log中数据修改为commit
			undo log：MVVC中记录版本，用于回滚
			retry log：从库同步bin log产生的log
			slow log：慢查询日志
		事务
			事务隔离级别
				未提交读：无事务
				提交读：解决脏读
				可重复读：解决不可重复读
					next-key lock也可解决幻读（mysql已采用） https://tech.meituan.com/2014/08/20/innodb-lock.html
				串行化：解决幻读 读时共享 写时排他
			MVVC：在提交读和可重复读级别下的机制
				事务中的每个操作有一定的可见范围，标识其他事务的数据是否对当前事务可见
				可重复读的select不会产生新的readView
		锁
			机制划分
				乐观锁：MVVC
				悲观锁：一般都是悲观锁
			粒度划分
				行锁
				表锁
				页锁
				gap lock
				next key lock：加在索引上，锁定一行+一侧/两侧范围
			操作分类
				读锁：共享锁
				写锁：排他锁
			其他
				意向锁：在加行锁的时候会给整个表加表级意向锁防止其他加表锁操作
			操作加锁
				select MVVC 乐观锁
				select in share mode 共享锁
				delete/update/select for update 排他锁 innodb中update没有索引是表锁，有索引是行锁
		DML
			join
				left/right/outer/inner：左全/右全/并集/交集
			in/exist
				in：结果集放内存
				exist：不缓存结果，每条外部记录进行一次子查询，适用于子查询大的情况
			limit
				原理
					从头遍历
				深度分页
					禁止跳页，每次查询传主键id
					ES存id，用id避免回表

		性能优化
			问题排查
				explain显示查询路径
				show processlist查看当前mysql线程
				开启慢查询日志，查看慢查询sql
			慢查询优化
				no cache看运行效率
				explain查看执行计划，每张表的查询是否符合预期，联表查询顺序是否合理
				调整索引，避免回表，设置索引下推
					回表：查询的数据需要去主键索引上额外查询
					索引下推：5.6之后将server中的过滤条件下放到非主键索引中（如果筛选字段在非主键索引中的话）
			大表优化
				垂直拆分：按列拆
				水平拆分：按行拆
					方式
						取模
						哈希
						范围
						分布式id
							snowflake：规则
							uuid：不规则
			分布式方案
				读写分离
					主库宕机：半同步复制，从库ack完才算一次完整操作
					同步延时：并行复制
	MySQL性能优化
		命名规范
		基本设计规范
		字段设计规范
			字段尽可能保证not null https://opensource.actionsky.com/20190710-mysql/
			用timestamp和datetime存时间（都跟时区挂钩，不太好），如果需要频繁修改或者需要查询效率则bigint比较好 https://cloud.tencent.com/developer/article/1883186
		索引设计规范
			索引最好不超过5个
			禁用全文索引
		SQL规范
			in 的值不要超过 500 个
			WHERE 从句中禁止对列进行函数转换和计算
		操作行为规范
			超 100 万行的批量写 (UPDATE,DELETE,INSERT) 操作,要分批多次进行操作
	*重要*
		MySQL执行计划
			如何分析explain结果
				type 何种类型的查询 ref range index all
				key 用到何种索引
				extra
					filesort 外部文件排序
					index 覆盖索引
					index condition 索引下推

	Redis
		基础
			快
				基于内存
				单线程模型+IO多路复用
				数据结构优化
			应用场景
				消息队列
				分布式锁
		数据结构
			基本
				string
					优化 （类似arraylist扩容）
						获取长度O(1)
						减少内存分配次数
						防止缓冲区溢出
						能够保存二进制数据
				hash
					类似hashmap
					渐进式搬迁：因为redis单线程承受不了O(n)级别的rehash，所以hash底层用两个dict保存数据，负载因子超过某个值时，修改操作放到dict2（附带一个bucket的搬迁），删除查找在dict1
				set
					应用
						抽奖
				zset
					底层
						ziplist/跳表->结构简单，内存占用少
					应用
						延时队列/定时任务
						排行榜
				list
					底层
						ziplist/双向链表
					应用
						消息队列
							redis挂了->rdb恢复
							多消费者订阅->pubsub
							消费者挂了，内存飙升
			其他
				bitmap
					底层
						一个keyhash到n个位置
					问题
						容易扩大范围误判
					应用
						垃圾邮件
						活跃用户
				hyperloglog
				geospatial index
		线程模型
			IO多路复用将感兴趣的事件关联到事件处理器上
			单线程原因
				容易维护
				瓶颈主要在IO和网络
				多线程影响性能
			6.0多线程（不建议开启）
				多线程用于网络IO读写
		内存管理
			数据过期
				判断
					过期字典
				策略
					惰性删除：取时删除
					定时删除：定期删一批
				内存淘汰
					volatile-lru
					volatile-ttl
					volatile-random
					allkeys-lru
					allkeys-random
					no-eviction
		持久化机制
			AOF
				记录命令
				种类
					always
					everysecond
					no
				实现
					先写内存，再写log，提高效率，有丢失风险
				aof重写
					开子进程遍历当前文件并转化为命令+遍历期间操作
			RDB
				副本备份
				命令
					save：阻塞
					bgsave：子线程不阻塞 
						copy on write，父进程和子进程共享内存，新数据由父进程另外写内存空间
			4.0混合持久化
				aof重写时直接用rdb+操作指令
		事务
			multi
				将n个命令打包为原子操作发给server端，相当于n个命令，但是只有1个请求

		性能优化
			bigkey问题
				发现
					redis --bigkeys参数查找
					分析rdb文件
				大key集中过期
					随机设置过期时间
					开启惰性删除，异步延迟释放内存
			批量操作减少网络传输
				多使用类似mget/mset等原生命令
				pipeline
		生产问题
			缓存穿透：key不存在
				前后台校验参数
				缓存无效key
				布隆过滤器
			缓存击穿：热点key过期
				永不过期
				预热
				加互斥锁
				hystrix做资源隔离，有限流db不会崩
			缓存雪崩：大量key同时过期
				事前：高可用-主从集群+淘汰策略+随机时间
				事中：限流降级
				事后：redis持久化恢复数据


		分布式
			集群
				原理：一致性hash 16384个slot，单个实例可通过多次hash占有多个虚拟节点，让整个hash环分布均匀
				gossip
					master被认为客观下线之后，会从slave中根据offset选举出新的master
			主从
				流程
					主节点fork子进程，将rdb传输给从节点
					期间的新命令写入缓冲区
					从节点删除所有数据，根据rdb重新写入
					写入缓冲区的新命令
					通过对比主从offset的差距判断同步是否完成，没有的话去缓冲区找命令或者执行全量同步
			哨兵
				作用
					集群监控
					故障转移
					消息通知
					配置中心
				哨兵节点通过定期对主从节点发送ping信息，判断以及更新节点状态，并且可以选出新的节点
			分布式锁
				setnx
					问题
						原子性->采用setnx原子性命令
						锁过期导致重复占用锁->锁续期 redission
				redlock
					批量向所有节点请求锁，半数通过之后获得锁的使用权
				redission
					watch dog 自动续期
					pub/sub 多线程通过订阅同一个主题实现的，有可能线程饥饿
	*重要*
		缓存读写策略
			cache aside
				读：先cache，读不到取db，回写cache
				写：写db，删cache（或者先删cache，延时双删）
				问题
					首次数据不在cache-> 预热
					数据频繁更新导致cache命中率降低 -> 改为更新cache+过期时间
					数据没有强一致->加锁
			read/write through
				读：先cache，读不到cache服务取db，回写cache
				写：写cache，cache服务回写db
				问题
					cache挂了，数据不可用->集群+rdb恢复
			write behind
				读：先cache，读不到cache服务取db，回写cache
				写：写cache，cache服务异步批量回写db
		特殊数据结构
			bitmap
		内存碎片
	ES
		原理
			全文检索
				term index 前缀树 FST压缩存储
				term dict 词典 记录单词以及postion list地址
				position list roaring map 第n块+offset 记录词出现的位置
				联合索引
					用 skip list/ bitset 取交集
			结果打分
				词频权重
				文档权重
			高效
				乐观控制并发
				倒排索引 压缩
				分布式多节点
				写入用大批顺序写代替随机写，先写内存，在顺序写segment，最后落盘
		术语
			index -> db
			type -> table
			document -> row
			field -> col
			node -> 实例
			cluster -> multi node
			shard -> tiny index
			mapping -> 表结构定义
			segment -> mini index
		问题
			深度分页
				解决
					禁止跳页+search_after：需要唯一或者组合字段标识
					scroll：消耗大量内存
	MongoDB
		基础
			应用场景
				快速拓展，数据格式不固定
				数据集中到某个key
				海量低价值数据
		存储引擎
			wiredTiger
				可以设置cache size，防止OOM
				数据压缩
				document锁
				结构
					B+树
					非聚簇索引，通过recordId关联数据
			MMAPV1
				mmap，极度耗内存
				不支持压缩
				只有库/表锁
		聚合
			聚合管道
				aggregation：类似java流操作
			单一聚合
				count
				distinct
		索引
			普通索引
				数组索引禁止建立联合索引
			组合索引
				和mysql一样遵循最左匹配和覆盖索引原则
			部分索引
				在普通索引上加上筛选条件
			内嵌文档索引
				对文档的子字段建立索引
		高可用
			主从
				slave根据primary的oplog进行同步
				不支持故障后自动切换主节点
			replication set
				组成
					主节点
					从节点 
					仲裁节点
				优势
					读写分离
					故障转移
			sharding
				组成
					route server 路由服务
					config server 存储路由配置信息
					shard server 分片机器
				流程
					请求发送到mongos路由进程，读取config server信息后进行请求分发，分片的chunk达到一定大小后会进行rebalance分裂
				分片类型
					范围分片 适合范围查询，数据不均匀
					hash分片 适合键值单个查询，数据均匀
				分片key选择
					业务相关
					分布均匀稀疏
					避免单调递增导致数据倾斜



开发工具
	maven
		核心概念
			作用
				项目构建
				依赖管理
				统一项目结构
			坐标
				groupId 组织公司
				artifactId 项目名
				version 项目版本
			依赖
				依赖适用范围：只在某个阶段需要该依赖
					compile 默认 编译、测试、运行
					test 测试
					provided 编译 测试
					runtime 运行 测试
				依赖冲突
					原则
						1.路径最短优先
						2.声明顺序优先
					排除
						exclusive
			仓库	
				本地仓库
				远程仓库
			生命周期
				default
					主要生命周期用于构建程序
				clean
					用于项目清理
				site
					由于发布站点
			插件
				maven本质就是插件执行框架
				plugins比如sonar、mybatis等插件
			多模块管理
				一个项目可以拆分成多个子项目对应多个pom文件
	git
		核心概念
			基本操作
	docker
		核心概念
			容器
			概念
			容器VS虚拟机
			基本概念
			常见命令
			底层原理

常用框架
	spring常见面试题
		spring基础
			spring就是轮子大合集
		spring IOC
			spring中bean的控制权交给IOC容器，所有对象在容器中初始化，由容器控制bean的生命周期
			一般通过XML配置文件或者注解的方式控制bean
			bean
				spring IOC容器管理的对象，在XML定义其元数据
				注解
					@Component
					@Repository
					@Service
					@Controller
				@Bean和@Component区别
					@Component修饰类 @Bean修饰方法
					@Component通过扫描类路径自动将该类装配到IOC容器中
					@Bean是在产生该类的方法上定义产生这个bean的方式
					@Bean的自定义性更强，比如将第三方库的类装配到spring中（总不能在源码里加个@Component）
				注入注解
					@Autowired spring内置 bytype注入，会根据类型找到对应的实现类bean注入，如果有多个实现则会byName注入
					@Resource jdk自带 默认byName注入
				作用域
					singleton 唯一，spring默认
					prototype 每次获取都会创建新的
					request 每次HTTP都会产生新的
					session 每次来自新session都会产生新的
				线程安全
					单例bean确实会可能有多线程问题
					但是大部分bean都是无状态的，比如dao， service
				生命周期


		spring AOP
			基于动态代理
				实现接口 JDK Proxy
				没实现接口 Cglib
			AspectJ AOP 编译时增强
			Spring AOP 运行时增强
		spring MVC
			流程
				dispatcherservlet拦截请求
				dispatcherservlet根据uri匹配相应的controller执行
				controller处理完请求后返回modelAndView
				dispatcherServlet将model传给view后返回浏览器
		设计模式
			代理模式 AOP基于动态代理
			单例模式 bean的作用域默认singleton
			工厂模式 beanFactory通过工厂模式生成bean
			装饰器模式 连接不同数据库时可以根据装饰器模式切换不同数据源
		spring事务
			类型
				编程式管理 代码中手动管理事务
				声明式事务 注解或xml文件 @Transactional
			传播范围
				有事务则加入，无事务则开启 默认 
				创建新事务，挂起旧事务；无事务=默认
				创建嵌套事务，无事务=默认
				有事务则加入，无事务抛异常
			隔离级别
				类比innodb隔离级别
			@Transactional(rollbackFor = Exception.class)
				发生runtimeException和checkedException都会回滚
			使用事项
				@Transactional注释的方法被本类中无注解的方法调用会失效
					因为aop在生成动态代理时是根据注解去生成代理类的，无注解方法对应代理类中的方法不会被增强
				必须作用在public方法上
		springboot
			自动装配
				需要装配的jar包中文件只需要按照SPI定义的标准实现就能将功能装配进springboot 比如 spring-boot-starter-data-redis只要在pom中引入就可以
				通过@EnableAutoConfiguration开启自动装配

			springboot启动流程流程
				初始化EventPublishListener
				发布启动事件
				创建ApplicationContext，执行Spring的IOC容器创建，最后refresh，标识ApplicationContext初始化完成
				发布启动成功时间
				发布就绪事件

	spring常用注解
		@SpringBootApplication
		spring bean相关
			@Autowired 注入对象到类中
			@Component\@Service\@Controller\@Repository\@RestController\@Bean 标识改类\方法产生bean
			@Configuratoin 声明配置类

	Mybatis常见面试题
		#{}、${}

系统设计
	restful api
		定义 一切接口都是资源的状态转移
	认证
		RBAC
			角色
			用户
			权限
		ABAC
			对象
			资源
			操作
			上下文
		JWT
			组成
				header 元数据
				payload 实际内容
				signature 签名
			流程 https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/107724046
				client通过用户名和密码登录之后服务根据payload和header+密钥生成JWT发放给client，以后的所有请求都会携带JWT
			优势
				无状态，服务端不需要存储任何信息
				支持去中心化，单点登录
				鉴权不需要通过cookie，而是header里的Authorization的JWT
			缺陷
				不可控，不支持下线，退出等操作
					对应的下线操作记录对应的状态
				不方便续签
					延长有效时间、缩短时间重新生成、每次都返回新的JWT
		SSO
			类似URS登录，所有的子系统登录都会统一跳转到SSO服务站点，由SSO服务认证并返回cookie（适用于子域名），之后子系统的登录态依赖该cookie
		Oauth2.0
			流程
				接口调用方向用户请求权限，再用从用户获取到的认证信息去接口提供方获取token，之后的方法调用都用token调用
	

分布式
	CAP&BASE
		CAP理论
			概念
				C 一致性 不同机器上数据是否一致
				A 可用性 服务是否可用
				P 分区 服务分布在不同机器上
			场景
				一般的服务保证AP即可，数据会有短暂不一致
				金融场景需要强一致性，所以会采用CP
		BASE理论
			概念
				ba 基本可用
				s 软状态
				e 最终一致性
	Paxos
		作用
			为了多节点能够达成一致的approval
		角色
			提议者 接受客户端请求并发出提案
			接受者 负责对提案投票
			学习者 超过半数投票之后接受提议并执行，结果返回给客户端
	Raft
		基础
		领导人选举
		日志复制
		安全性
	API网关
		概述
			将某些统一的功能抽象成统一的处理逻辑，比如 限流、降级、转发、过滤，这些不需要在每个服务里都自己弄一套
		作用
			请求过滤
			请求转发
		常见网关
			Zuul
			Spring cloud gateway
	分布式ID
		解决方案
	分布式锁
		方案
			基于redis的分布式锁
				setnx
					redission优雅续期
				lua
				集群化部署的问题
					redLock算法
			基于zk （类似CLH队列）
				持久节点 + 临时顺序节点 + 监听上一个节点用于释放锁通知
	分布式事务
	分布式配置中心
	RPC
		原理
			高度定制化的协议用于实现近似于本地调用效率的方法调用			
		HTTP/RPC
			不冲突
			一个协议，一个是通用化的概念
	Dubbo
		分布式基础
		架构
		负载均衡
		序列化协议
	ZK
		基础
			特点
				顺序一致性 消息丢失？ 有FIFO队列保证消息顺序性
				原子性 多机器部署如何保证高效？
				单一系统映像
				可靠性
			场景
				全局唯一ID
				数据发布订阅
				分布式锁
			功能
				管理存储数据
				提供监听服务
		概念
			数据模型
				一颗多叉树的文件存储模型，类似UNIX文件系统
			znode
				持久/临时（顺序）节点
				ACL
					类似UNIX的read/write/delete权限控制
			Watcher
				事件监听机制
			session
				zk服务器和客户端之间的一个TCP长连接
		集群
			角色
				leader
				follower
				observer
			选举流程
				选举 投票，半数以上当选leader
				发现 leader接收follower的事务
				同步 将最新进度的事务同步到follower
				广播 正式提供服务
			集群奇数台
				超过一半的节点正常运行才能正常提供服务 -> 2n == 2n + 1
				过半机制可以有效防止集群脑裂
		ZAB协议&paxos算法
			zab
				崩溃恢复
					leader崩溃后剩下的follower会根据zxid选举出新leader
				消息广播
					过半follower完成和leader的同步后，新加入的follower会根据ZAB和leader同步数据
		一致性问题
			拜占庭将军问题
				不可靠的信道上通过消息传递的方式达到一致性是不可能的
		一致性协议算法
			2pc
				1.协调者告知所有参与者锁定资源，并执行事务但不提交
				2.如果所有参与者都ready，提交，否则回滚
				问题
					阻塞时间巨长，因为锁定资源和执行事务是同步的
					数据不一致
			3pc
				1.协调者询问所有参与者是否能准备资源
				2.协调者让所有参与者执行事务但不提交
				3.进入上一阶段（预提交阶段）的参与者默认都提交
				特点
					阻塞时间短
					数据不一致
					每个阶段都有超时机制
					还有不一致
			tcc
				业务层面的try confirm cancel
				特点
					耦合程度高
			paxos
				prepare
					proposer向acceptor提出全局唯一编号n，acceptor将最大编号返回给proposer
				accept
					proposer的提案被半数以上的acceptor批准，再向acceptor发送真正的提案内容（包括之前同意和不同意的acceptor）
				问题
					不同提案者反复增加提案编号，相互导致对象无法进入二阶段
		ZK应用
			分布式锁
			全局唯一id（节点的全路径是唯一的）
			集群状态监控 （父节点下创建临时节点，并监控父节点）
			注册中心 （server在父节点下创建临时节点，内容为ip port，client通过watcher机制监听父节点，即可获得子节点的信息）


高性能
	读写分离
		问题
			主从同步延迟
			解决
				强制将读请求路由到主库（适用于需要最新数据场景）
				延迟读取（支付完之后会等5s，再跳转到支付成功页面）
			方案
				代理 MyCat
				组件 ShardingJDBC
	分库分表
		场景
			并发大
			单表数据大导致读写效率低备份效率低
		问题
			事务
			分布式id
			join操作
		方案
			ShardingSphere
		迁移
			停机
			双写

	负载均衡
	CDN
		原理
	SQL优化
	消息队列
		作用
			异步
			削峰
			解耦
		问题
			一致性问题
			复杂度
			可用性
		JMS/AMQP
			前者为java api，后者为一套标准协议
		选型
	Kafka
		应用场景
			消息队列
			数据处理
		对比
			大量异步和批处理思想，性能好
			生态好
		结构
			producer -> 
			broker -> 
			topic -> 类似数据库里的表
			partition -> 类似于分片 不同topic的不同partition可以处于不同broker里
			segment -> 每个partition存放多个segment
			consumer -> 和partition为1对n（n >= 0）
			zk 
				broker注册
				topic注册
				负载均衡
			replica 副本集

		存在问题
			消息丢失
				producer丢失 ack
				broker丢失 ack = 1强制同步磁盘
				consumer丢失 手动commit
			重复消费
				幂等
				记录消费记录
			乱序
				单partition
				多partition +对应数量consumer 内部hash key分发
			消息堆积
				单条消息 超时机制 + 降级 + 定时任务重试
				多条 监控 + poll时间调大 + 任务改异步
	RabbitMQ
		队列模型/主题模型
		架构图
		问题
		分布式事务
		刷盘机制
		死信队列

高可用
	设计指南
		提高可用性的方法
			代码质量
			集群
			限流
			超时重试
			熔断
			异步
			缓存

	冗余设计
	服务限流
		限流算法
			固定窗口
			滑动窗口
			漏桶
			令牌桶
		单机限流
			ratelimiter
		分布式限流
			中间件
			网关



question list:
	128. hash done
	139. dp done
	148. recur done but 注意链表结尾需要置空，防止出现循环链表
	209. bfs done by slide window?
	234. reverse done
	236. recur done
	312. dp
	437. 前缀和 done












